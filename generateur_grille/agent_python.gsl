.# > name="2- Full agent"
.# > keyword="Python"
.# > description="A fully-fledged Python agent, ready for industrial use."
.# > agentMode="ONE"
.# > onlyAgentDefinitionSupport="true"
.template 0
function typeToIGSType (type)
   if (type = "STRING")
       return "igs.STRING_T"
   elsif (type = "INTEGER")
       return "igs.INTEGER_T"
   elsif (type = "DOUBLE")
       return "igs.DOUBLE_T"
   elsif (type = "BOOL")
       return "igs.BOOL_T"
   elsif (type = "IMPULSION")
       return "igs.IMPULSION_T"
   elsif (type = "DATA")
       return "igs.DATA_T"
   endif
endfunction typeToIGSType
.endtemplate
.template 1
.ignorecase = 0
.
.####################################################################################
.echo "Creating directories structure ..."
.directory.create("src")
.
.####################################################################################
.echo "Generating src/main.py ..."
.directory.create("src")
.output "src/main.py"
#!/usr/bin/env -P /usr/bin:/usr/local/bin python3 -B
# coding: utf-8

#
#  main.py
#  $(definition.name) $(definition.version ?? "version " + definition.version)
#  Created $(defined(definition.author) ?? "by " + definition.author ? "") on $(date.picture())
#
.if (defined(definition->description) & string.length(definition->description))
# $(definition->description:block)
.else
# "no description"
.endif
#

import signal
import getopt
import time
from pathlib import Path
import traceback
import sys

from $(definition.name) import *

port = 5670
agent_name = "$(definition.name)"
device = None
verbose = False
is_interrupted = False

short_flag = "hvip:d:n:"
long_flag = ["help", "verbose", "interactive_loop", "port=", "device=", "name="]

ingescape_path = Path("~/Documents/Ingescape").expanduser()


def print_usage():
    print("Usage example: ", agent_name, " --verbose --port 5670 --device device_name")
    print("\\nthese parameters have default value (indicated here above):")
    print("--verbose : enable verbose mode in the application (default is disabled)")
    print("--port port_number : port used for autodiscovery between agents (default: 31520)")
    print("--device device_name : name of the network device to be used (useful if several devices available)")
    print("--name agent_name : published name for this agent (default: ", agent_name, ")")
    print("--interactive_loop : enables interactive loop to pass commands in CLI (default: false)")


def print_usage_help():
    print("Available commands in the terminal:")
    print("\t/quit : quits the agent")
    print("\t/help : displays this message")

def return_iop_value_type_as_str(value_type):
    if value_type == igs.INTEGER_T:
        return "Integer"
    elif value_type == igs.DOUBLE_T:
        return "Double"
    elif value_type == igs.BOOL_T:
        return "Bool"
    elif value_type == igs.STRING_T:
        return "String"
    elif value_type == igs.IMPULSION_T:
        return "Impulsion"
    elif value_type == igs.DATA_T:
        return "Data"
    else:
        return "Unknown"

def return_event_type_as_str(event_type):
    if event_type == igs.PEER_ENTERED:
        return "PEER_ENTERED"
    elif event_type == igs.PEER_EXITED:
        return "PEER_EXITED"
    elif event_type == igs.AGENT_ENTERED:
        return "AGENT_ENTERED"
    elif event_type == igs.AGENT_UPDATED_DEFINITION:
        return "AGENT_UPDATED_DEFINITION"
    elif event_type == igs.AGENT_KNOWS_US:
        return "AGENT_KNOWS_US"
    elif event_type == igs.AGENT_EXITED:
        return "AGENT_EXITED"
    elif event_type == igs.AGENT_UPDATED_MAPPING:
        return "AGENT_UPDATED_MAPPING"
    elif event_type == igs.AGENT_WON_ELECTION:
        return "AGENT_WON_ELECTION"
    elif event_type == igs.AGENT_LOST_ELECTION:
        return "AGENT_LOST_ELECTION"
    else:
        return "UNKNOWN"

def signal_handler(signal_received, frame):
    global is_interrupted
    print("\\n", signal.strsignal(signal_received), sep="")
    is_interrupted = True


def on_agent_event_callback(event, uuid, name, event_data, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(definition.name:Pascal))
        # add code here if needed
    except:
        print(traceback.format_exc())


def on_freeze_callback(is_frozen, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(definition.name:Pascal))
        # add code here if needed
    except:
        print(traceback.format_exc())

.if (defined (definition.iopCallbackMode))
.if (!(definition.iopCallbackMode = "none") & (count(definition.input) > 0))

# inputs
.endif
.for definition.input
def $(input.name)_input_callback(iop_type, name, value_type, value, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(definition.name:Pascal))
.if(!(input.type = "IMPULSION"))
        agent_object.$(input.name)I = value
.endif
        # add code here if needed
    except:
        print(traceback.format_exc())

.endfor
.endif
.if (defined (definition.iopCallbackMode))
.if (!(definition.iopCallbackMode = "none") & (count(definition.parameter) > 0))
# parameters
.endif
.for definition.parameter
def $(parameter.name)_parameter_callback(iop_type, name, value_type, value, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(definition.name:Pascal))
.if(!(parameter.type = "IMPULSION"))
        agent_object.$(parameter.name)P = value
.endif
        # add code here if needed
    except:
        print(traceback.format_exc())


.endfor
.endif
.if (count(definition.service) > 0)
# services
.endif
.for service
def $(service.name)_callback(sender_agent_name, sender_agent_uuid, service_name, tuple_args, token, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(definition.name:Pascal))
.serviceArgIndex = 0
.for argument
        $(argument.name) = tuple_args[$(serviceArgIndex)]
.serviceArgIndex = serviceArgIndex +1
.endfor
        agent_object.$(service.name)(sender_agent_name, sender_agent_uuid\
.for argument
, $(argument.name)\
.endfor
\)
    except:
        print(traceback.format_exc())


.endfor
if __name__ == "__main__":

    # catch SIGINT handler before starting agent
    signal.signal(signal.SIGINT, signal_handler)
    interactive_loop = False

    try:
        opts, args = getopt.getopt(sys.argv[1:], short_flag, long_flag)
    except getopt.GetoptError as err:
        igs.error(err)
        sys.exit(2)
    for o, a in opts:
        if o == "-h" or o == "--help":
            print_usage()
            exit(0)
        elif o == "-v" or o == "--verbose":
            verbose = True
        elif o == "-i" or o == "--interactive_loop":
            interactive_loop = True
        elif o == "-p" or o == "--port":
            port = int(a)
        elif o == "-d" or o == "--device":
            device = a
        elif o == "-n" or o == "--name":
            agent_name = a
        else:
            assert False, "unhandled option"

    igs.agent_set_name(agent_name)
.if (defined (definition.version) & string.length(definition.version))
    igs.definition_set_version("$(definition.version)")
.endif
.if (defined (definition->description) & string.length(definition->description))
    igs.definition_set_description("""$(definition->description)""")
.endif
    igs.log_set_console(verbose)
    igs.log_set_file(True, None)
    igs.log_set_stream(verbose)
    igs.set_command_line(sys.executable + " " + " ".join(sys.argv))

    igs.debug(f"Ingescape version: {igs.version()} (protocol v{igs.protocol()})")

    if device is None:
        # we have no device to start with: try to find one
        list_devices = igs.net_devices_list()
        list_addresses = igs.net_addresses_list()
        if len(list_devices) == 1:
            device = list_devices[0]
            igs.info("using %s as default network device (this is the only one available)" % str(device))
        elif len(list_devices) == 2 and (list_addresses[0] == "127.0.0.1" or list_addresses[1] == "127.0.0.1"):
            if list_addresses[0] == "127.0.0.1":
                device = list_devices[1]
            else:
                device = list_devices[0]
            print("using %s as de fault network device (this is the only one available that is not the loopback)" % str(device))
        else:
            if len(list_devices) == 0:
                igs.error("No network device found: aborting.")
            else:
                igs.error("No network device passed as command line parameter and several are available.")
                print("Please use one of these network devices:")
                for device in list_devices:
                    print("\t", device)
                print_usage()
            exit(1)

    agent = $(definition.name:Pascal)()

    igs.observe_agent_events(on_agent_event_callback, agent)
    igs.observe_freeze(on_freeze_callback, agent)

.for definition.parameter
    igs.parameter_create("$(parameter.name)", $(typeToIGSType(parameter.type)), None)
.endfor
.if (count(definition.parameter)>0)

.endif
.for definition.input
    igs.input_create("$(input.name)", $(typeToIGSType(input.type)), None)
.endfor
.if (count(definition.input)>0)

.endif
.for definition.output
    igs.output_create("$(output.name)", $(typeToIGSType(output.type)), None)
.endfor
.if (count(definition.output)>0)

.endif
.for definition.input
    igs.observe_input("$(input.name)", $(input.name)_input_callback, agent)
.endfor
.if (count(definition.input)>0)

.endif
.for definition.parameter
    igs.observe_parameter("$(parameter.name)", $(parameter.name)_parameter_callback, agent)
.endfor
.if (count(definition.parameter)>0)

.endif
.for service
    igs.service_init("$(service.name)", $(service.name)_callback, agent)
.for argument
    igs.service_arg_add("$(service.name)", "$(argument.name)", $(typeToIGSType(argument.type)))
.endfor
.endfor
.if (count(definition.service)>0)

.endif
    igs.start_with_device(device, port)
    # catch SIGINT handler after starting agent
    signal.signal(signal.SIGINT, signal_handler)

    if interactive_loop:
        print_usage_help()
        while True:
            command = input()
            if command == "/quit":
                break
            elif command == "/help":
                print_usage_help()
    else:
        while (not is_interrupted) and igs.is_started():
            time.sleep(2)

    if igs.is_started():
        igs.stop()
.
.echo "Generating src/$(definition.name).py ..."
.directory.create("src")
.output "src/$(definition.name).py"
#!/usr/bin/env -P /usr/bin:/usr/local/bin python3 -B
# coding: utf-8

#
#  $(definition.name).py
#  $(definition.name) $(definition.version ?? "version " + definition.version)
#  Created $(defined(definition.author) ?? "by " + definition.author ? "") on $(date.picture())
#
.if (defined(definition->description) & string.length(definition->description))
# $(definition->description:block)
.else
# "no description"
.endif
#
import ingescape as igs


class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class $(definition.name:Pascal)(metaclass=Singleton):
    def __init__(self):
.if (count(definition.input) = 0) & (count(definition.parameter) = 0) & (count(definition.outputs) = 0)
        pass
.endif
.non_imp_total_cnt = 0
.if (!(definition.iopCallbackMode = "none")) & (count(definition.input) > 0)
        # inputs
.endif
.for definition.input
.if(!(input.type = "IMPULSION"))
        self.$(input.name)I = None
.non_imp_total_cnt += 1
.endif
.endfor
.if (count(definition.input) > 0)

.endif
.if (!(definition.iopCallbackMode = "none")) & (count(definition.parameter) > 0)
        # parameters
.endif
.for definition.parameter
.if(!(parameter.type = "IMPULSION"))
        self.$(parameter.name)P = None
.non_imp_total_cnt += 1
.endif
.endfor
.if (count(definition.parameter) > 0)

.endif
.if (!(definition.iopCallbackMode = "none")) & (count(definition.output) > 0)
        # outputs
.endif
.for definition.output
.if(!(output.type = "IMPULSION"))
        self._$(output.name)O = None
.non_imp_total_cnt += 1
.endif
.endfor
.if (count(definition.output) > 0)

.endif
.if (non_imp_total_cnt = 0)
        pass

.endif
.if (!(definition.iopCallbackMode = "none")) & (count(definition.output) > 0)
    # outputs
.endif
.for definition.output
.if (output.type = "IMPULSION")
    def set_$(output.name)O(self):
        igs.output_set_impulsion("$(output.name)")

.else
    @property
    def $(output.name)O(self):
        return self._$(output.name)O

    @$(output.name)O.setter
    def $(output.name)O(self, value):
        self._$(output.name)O = value
        if self._$(output.name)O is not None:
.if (output.type = "INTEGER")
            igs.output_set_int("$(output.name)", self._$(output.name)O)
.elsif (output.type = "DATA")
            igs.output_set_data("$(output.name)", value)
.else
            igs.output_set_$(output.type :lower)("$(output.name)", self._$(output.name)O)
.endif
.endif
.endfor

.if (count(definition.service))
    # services
.endif
.for service
    def $(service.name)(self, sender_agent_name, sender_agent_uuid\
.for argument
, $(argument.name)\
.endfor
\):
        pass
        # add code here if needed

.
.endfor

.####################################################################################
.echo "Generating other static files ..."
.output "LICENSE"
Add your license here
.
.output "requirements.txt"
ingescape >= 3.0.1
.
.output "README.md"
## Prerequisites

* Ingescape C library installed
* Python3 (https://www.python.org/downloads/)

## Install dependencies
```bash
python3 -m pip install ingescape
```

## Run
```bash
python3 main.py
```

.endtemplate
